// ////////////////////////////////////////////////////
// ///////////////////---------------- Appointments--------------------////////////////////
// CROW_ROUTE((*app), URL("/services/<string>/appointments/create"))
//     .CROW_MIDDLEWARES(*app, RateLimit, ElapsedTime, Authorization, BRequest, DataIntegrity)
//     .methods(crow::HTTPMethod::POST)(
//         [this, app](const crow::request &req, crow::response &res, const std::string_view entityType)
//         {
//             executeControllerMethod(appointmentRegistry, entityType, &AppointmentControllerBase::Create, req, res,
//                                     app->get_context<BRequest>(req).payload);
//         });

// CROW_ROUTE((*app), URL("/services/<string>/appointments/read"))
//     .CROW_MIDDLEWARES(*app, RateLimit, ElapsedTime, Authorization, BRequest)
//     .methods(crow::HTTPMethod::POST)(
//         [this, app](const crow::request &req, crow::response &res, const std::string_view entityType)
//         {
//             executeControllerMethod(appointmentRegistry, entityType, &AppointmentControllerBase::Read, req, res,
//                                     app->get_context<BRequest>(req).payload);
//         });

// CROW_ROUTE((*app), URL("/services/<string>/appointments/update"))
//     .CROW_MIDDLEWARES(*app, RateLimit, ElapsedTime, Authorization, BRequest, DataIntegrity)
//     .methods(crow::HTTPMethod::PUT)(
//         [this, app](const crow::request &req, crow::response &res, const std::string_view entityType)
//         {
//             executeControllerMethod(appointmentRegistry, entityType, &AppointmentControllerBase::Update, req, res,
//                                     app->get_context<BRequest>(req).payload);
//         });

// CROW_ROUTE((*app), URL("/services/<string>/appointments/delete"))
//     .CROW_MIDDLEWARES(*app, RateLimit, ElapsedTime, Authorization, PathParameter)
//     .methods(crow::HTTPMethod::DELETE)(
//         [this, app](const crow::request &req, crow::response &res, const std::string_view entityType)
//         {
//             executeControllerMethod(appointmentRegistry, entityType, &AppointmentControllerBase::Delete, req, res,
//                                     app->get_context<PathParameter>(req).params);
//         });

//     using AppointmentVariant =
//         std::variant<std::shared_ptr<AppointmentController<ClinicAppointment>>, std::shared_ptr<AppointmentController<PharmacyAppointment>>,
//                      std::shared_ptr<AppointmentController<LaboratoryAppointment>>,
//                      std::shared_ptr<AppointmentController<RadiologyCenterAppointment>>>;

//     std::unordered_map<std::string_view, AppointmentVariant> appointmentRegistry = {
//         {"clinics", Store::getObject<AppointmentController<ClinicAppointment>>()},
//         {"pharmacies", Store::getObject<AppointmentController<PharmacyAppointment>>()},
//         {"laboratories", Store::getObject<AppointmentController<LaboratoryAppointment>>()},
//         {"radiologycenters", Store::getObject<AppointmentController<RadiologyCenterAppointment>>()}};